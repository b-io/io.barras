#!/bin/sh
################################################################################
#NAME
#    <NAME> - test URANUS
#
#SYNOPSIS
#    <NAME> [OPTION]...
#
#OPTIONS
#    -h
#        display this help and exit
#
#    -i
#        output version information and exit
#
#    -l=LEVEL
#        set the hierarchy level (-1 by default)
#
#    -v
#        explain what is being done
#
#AUTHOR
#    Written by Florian Barras (florian@barras.io).
#
#COPYRIGHT
#    Copyright Â© 2013-2018 Florian Barras <https://barras.io>.
#    The MIT License (MIT) <https://opensource.org/licenses/MIT>.
################################################################################


################################################################################
# IMPORTS
################################################################################

# Set the URANUS directory
URA_DIR="`pwd`"/'uranus' &&

# Import URANUS
. "$URA_DIR"/'profile' &&
. "$URA_DIR"/'ura.sh' &&

# Import URANUS GPG
. "$URA_DIR"/'sms/gpg/ura-gpg.sh' &&


################################################################################
# ARGUMENTS
################################################################################

# Load the arguments
loadArguments $# "${@:-}" &&


################################################################################
# FUNCTIONS
################################################################################

#> arrayInfo ARRAY
arrayInfo()
{
	checkArguments $# 1 &&

	startList "ARRAY INFO" &&
		startList "Brut array" &&
			printn "$1" &&
		endList &&

		startList "Decoded array" &&
			verb 'printArray' &&
			printArray "$1" \" &&
			printn &&

			verb 'print0Array' &&
			print0Array "$1" \" | xargs -0 -I '{}' echo '{}' &&

			verb 'printnArray' &&
			printnArray "$1" \" &&
		endList &&
	endList
}

#> arrayTest ARRAY SIZE
arrayTest()
{
	checkArguments $# 2 &&
	size=`getArraySize "$1"` &&
	checkIndex "$2" &&

	# Check the size
	assert $size $2 &&
	verb "SIZE: $size" &&

	# Display the array
	arrayInfo "$1"
}


################################################################################
# PROCESS
################################################################################

########################################
startList 'LOG'
########################################

	printn "$LOG_PATH"
	removePath "$LOG_PATH"

endList

########################################
startList 'PRINT'
########################################

	text="hello 'world'!"

	assert "`print "$text"`" "$text"
	assert "`print0 "$text"`" "$text"
	printn "$text" | toAssert "$text"

	red 'RED'
	green 'GREEN'
	yellow 'YELLOW'
	blue 'BLUE'
	magenta 'MAGENTA'
	cyan 'CYAN'

endList

########################################
startList 'SYSTEM'
########################################

	text='=ura'

	printn "$text" |
	(toContain "$text" && printn 'ok' || printn 'ko') |
	toAssert 'ok'

	printn "$text" |
	(toContainWord "$text" && printn 'ok' || printn 'ko') |
	toAssert 'ok'

endList

########################################
startList 'NUMBERS'
########################################

	verb 'Cast'
	castToInt '1.234' | toAssert 1

	verb 'Compute'
	compute "`castToInt '3.0'`" * 3 | toAssert 9
	printn '3 * 3' | toCompute | toAssert 9

	verb 'Add / subtract'
	add 1 -3 | toSubtract 2 | toIncrement | toAssert -3

	verb 'Create sequence'
	sum `createSequence -5 5` | toAssert 0
	createSequence -5 5 | toSum | toAssert 0

	verb 'Iterate'
	sum `iterate 0 6` | toAssert 15
	iterate 0 6 | toSum | toAssert 15
	for i in `iterate 0 6`
	do
		printn $i
	done | toSum | toAssert 15
	for i in `printn 0 | toIterate 6`
	do
		printn $i
	done | toSum | toAssert 15

	verb 'Get min / max'
	getMin 2 -1 3 5 -4 | toAssert -4
	getMax 2 -1 3 5 -4 | toAssert 5
	getMin -1 1 | toAssert -1
	getMax -1 1 | toAssert 1
	createSequence -5 5 | toGetMin | toAssert -5
	createSequence -5 5 | toGetMax | toAssert 5

endList

########################################
startList 'STRINGS'
########################################

	text="'hello' 'world' '!'"

	verb 'Append'
	printn "'hello'" | toAppendn " 'world' '!'" | toAssert "$text"

	startList 'Extract'
		extractFrom 'ABC' '' | toAssert 'ABC'
		printn 'ABC' | toExtractFrom '' | toAssert 'ABC'
		extractFrom 'ABC' 'A' | toAssert 'BC'
		printn 'ABC' | toExtractFrom 'A' | toAssert 'BC'

		extractTo 'ABC' '' | toAssert 'ABC'
		printn 'ABC' | toExtractTo '' | toAssert 'ABC'
		extractTo 'ABC' 'C' | toAssert 'AB'
		printn 'ABC' | toExtractTo 'C' | toAssert 'AB'

		extract 'ABC' '' '' | toAssert 'ABC'
		printn 'ABC' | toExtract '' '' | toAssert 'ABC'
		extract 'ABC' 'A' 'C' | toAssert 'B'
		printn 'ABC' | toExtract 'A' 'C' | toAssert 'B'
	endList

	verb 'Index'
	getIndex 'ABC' 'B' | toAssert 2
	printn 'ABC' | toGetIndex 'B' | toAssert 2

	verb 'Substring'
	printn "- $text" | toGetSubstring 4 5 | toAssert 'hello'

	verb 'Repeat'
	repeat '#' 5 | toAssert '#####'
	printn '#' | toRepeat 5 | toAssert '#####'

	verb 'Trim'
	printn '	   trim	 	 ' | toTrim | toQuote | toAssert $QUOTE'trim'$QUOTE

	verb 'Quote'
	printn "$text" | toQuote | toUnquote | toAssert "$text"

endList


########################################
startList 'ARRAY'
########################################

	verb 'Create'
	A="`iterate 0 3 | toCreateArray`" # '0' '1' '2'

	verb 'Append'
	createArray | toAppendToArray '' | toGetArraySize | toAssert 1
	createArray '' | toAppendToArray | toGetArraySize | toAssert 1
	createArray '' | toAppendToArray '' | toGetArraySize | toAssert 2

	verb 'Get size'
	createArray | toGetArraySize | toAssert 0
	createArray '' | toGetArraySize | toAssert 1
	appendToArray "`createArray`" '' | toGetArraySize | toAssert 1
	createArray 'a b' '' | toGetArraySize | toAssert 2
	createArray 'a' 'b' 'c' | toGetArraySize | toAssert 3
	getArraySize "$A" | toAssert 3
	createArray 'a' 'b' | toAppendToArray 'c' | toGetArraySize | toAssert 3

	verb 'Get the first element'
	printn "$A" | toGetElementAt 0 | toAssert 0
	getElementAt "$A" 0 | toAssert 0

	verb 'Append an item'
	item=4
	B="`appendToArray "$A" "$item"`" # '1' '2' '3' '4'

	verb 'Get the index of the first item'
	printn "$B" | toGetElementIndex "$item" | toAssert 3
	getElementIndex "$B" "$item" | toAssert 3

	verb 'Remove the first item'
	printn "$B" | toRemoveElement "$item" | toGetArraySize | toAssert 3
	removeElement "$B" "$item" | toGetArraySize | toAssert 3

	verb 'Remove the last element'
	index=`getArraySize "$B" | toSubtract 1`
	printn "$B" | toRemoveElementAt $index | toGetArraySize | toAssert 3
	removeElementAt "$B" $index | toGetArraySize | toAssert 3

endList

########################################
startList 'FILES'
########################################

	verb "Filename: '`getBase`'"
	verb "Filename without extension: '`getBaseWithoutExtension`'"
	verb "Parent directory: '`getDir`'"
	verb "Real path: '`getPath`'"
	verb "Real directory: '`getPath | toGetPath`'"

	checkPath "`getPath`"

	path="$0"'.ext'
	printn "$path" | getBaseWithoutExtension | toAssert "$0"
	printn "$path" | toGetBaseExtension | toAssert 'ext'

	prepend "$path" "That's work!"
endList

########################################
startList 'LEVEL'
########################################

	currentLevel=$LEVEL
	verb 'Increment / decrement the level'
	incrementLevel
	assert $LEVEL `increment $currentLevel`
	decrementLevel
	assert $LEVEL $currentLevel

endList

########################################
startList 'MESSAGES'
########################################

	startList 'Test the list'
		startList 'A'
			startList 'B'
				verb 'C' \-
			verb 'D'
		endList
		verb 'E'
	endList

	startList 'Test the different types of messages'
		info 'Information'
		warn 'Warning'
	endList

	printn 'HELLO' | toPrintMessage

	# Get the error log
	entry='
		type=AVC
		msg=audit(1363289005.532:184): avc: denied { read } for
		pid=29199
		comm="Trace"
		name="online"
		dev="sysfs"
		ino=30
		scontext=staff_u:staff_r:googletalk_plugin_t
		tcontext=system_u:object_r:sysfs_t tclass=file' &&

	if [ -n "$entry" ]
	then
		# Extract information from the last access denied
		pid="`printn "$entry" | sed -n 's|.*pid\=\([^ ]*\).*|\1|p'`" &&
		comm="`printn "$entry" | sed -n 's|.*comm\=\"\([^\"]*\).*|\1|p'`" &&
		name="`printn "$entry" | sed -n 's|.*name\=\"\([^\"]*\).*|\1|p'`" &&
		dev="`printn "$entry" | sed -n 's|.*dev\=\"\([^\"]*\).*|\1|p'`" &&
		ino="`printn "$entry" | sed -n 's|.*ino\=\([^ ]*\).*|\1|p'`" &&
		scontext="`printn "$entry" | sed -n 's|.*scontext\=\([^ ]*\).*|\1|p'`" &&
		tcontext="`printn "$entry" | sed -n 's|.*tcontext\=\([^ ]*\).*|\1|p'`" &&
		tclass="`printn "$entry" | sed -n 's|.*tclass\=\([^ ]*\).*|\1|p'`" &&

		# Formulate and print the error message
		printn 'The '"`quote "$comm"`"' process with PID '"`quote "$pid"`"\
			'tried to read a '"`quote "$tclass"`"' called '"`quote "$name"`"\
			'on a file system hosted on the '"`quote "$dev"`"' device. This'\
			'file has inode number '"`quote "$ino"`"', and has the security'\
			'context '"`quote "$scontext"`"' assigned to it. The'\
			"`quote "$comm"`"' process itself is running with the'\
			"`quote "$tcontext"`"' context (domain).' |
		toPrintToLog
	fi

endList

########################################
startList 'ARGUMENTS'
########################################

	#> test ARRAY [ELEMENT]...
	test()
	{
		checkArguments $# 1 &&

		shift &&
		printn $#
	}
	test 1 2 | toAssert 1

	verb 'List the flags'
	printn "`getFlags`"

	verb 'List the options'
	printnArray "$OPTS"

	verb 'List the arguments (without options)'
	printnArray "$ARGS"

endList

########################################
startList 'USERS'
########################################

	verb 'Check if the user is root'
	checkRoot
	getUserId | toAssert 0

endList

########################################
startList 'FIND'
########################################

	verb 'Find using the zero flag (-0)'
	ura-find `getFlags` -0 -f -p="`pwd`" -r '*.sh'
	printn

	verb 'Find'
	ura-find `getFlags` -f -p="`pwd`" -r -w='*' -n '*.*' |
		xargs -I '{}' sh -c 'printf "%s\n" "{}"'

endList

########################################
startList 'GPG'
########################################

	createGpgKey

endList
