#!/bin/sh
################################################################################
#NAME
#    <NAME> - search for files in a directory hierarchy
#
#SYNOPSIS
#    <NAME> [OPTION]... [FILE]...
#
#OPTIONS
#    Search for the FILEs (* by default).
#    Note that the meta-characters (*, ? and []) are allowed.
#
#    -0
#        Print the full filename on the standard output, followed by a null
#        character (instead of the newline character).
#
#    -d
#        Search for directories.
#
#    -f
#        Search for files.
#
#    -h
#        Display this help and exit.
#
#    -i
#        Output version information and exit.
#
#    -l=LEVEL
#        Set the hierarchy level (-1 by default).
#
#    -n
#        Search for all files except the FILEs.
#
#    -p=PATH
#        Set the path (the current directory by default).
#
#    -r
#        Let the paths be relative.
#
#    -v
#        Explain what is being done.
#
#    -w=PATTERN|...
#        Search for all files with the PATTERN. Note that the meta-character |
#        is allowed to delimit several PATTERNs. This is especially useful with
#        the -n option.
#
#AUTHOR
#    Written by Florian Barras (florian@barras.io).
#
#COPYRIGHT
#    Copyright Â© 2013-2020 Florian Barras <https://barras.io>.
#    The MIT License (MIT) <https://opensource.org/licenses/MIT>.
################################################################################


################################################################################
# PROFILES
################################################################################

# Load the required URANUS profiles
: "${URA_PROFILE_DIR:=/etc/profile.d}" &&
if [ -z "${URA_PROFILE:-}" ]
then
	. "$URA_PROFILE_DIR"/'uranus.sh'
fi &&


################################################################################
# IMPORTS
################################################################################

# Set the URANUS settings for version information (-i)
AUTHOR="$URA_AUTHOR" &&
LICENSE="$URA_LICENSE" &&
URL="$URA_URL" &&
VENDOR="$URA_VENDOR" &&
VERSION="$URA_VERSION" &&

# Set the URANUS settings for optional arguments
OPTIONS='0dfnp:rw:' &&

# Import URANUS
. "$URA_PATH" &&


################################################################################
# ARGUMENTS
################################################################################

# Load the arguments
loadArguments $# "${@:-}" &&

# Set the default FILE (search string)
if [ $ARGS_NUMBER -eq 0 ]
then
	ARGS="`createArray '*'`"
fi &&

# Parse the additional options
delimiter='\n' &&
not='' &&
path='.' &&
patterns="`createArray '*'`" &&
relative=$FALSE &&
type='' &&
for option in `printArray "$OPTS"`
do
	case "$option" in
		0)	delimiter='\0'
			;;
		d)	type='-type d'
			;;
		f)	type='-type f'
			;;
		n)	not='!'
			;;
		r)	relative=$TRUE
			;;
		p*)	path="`getOptionValue "$option"`"
			;;
		w*)	patterns="`getOptionValue "$option" | toSplit '|' | toCreateArray`"
			;;
	esac
done &&


################################################################################
# CHECKS
################################################################################

checkDir "$path" &&


################################################################################
# PROCESS
################################################################################

# o Construct the command

	# - Change to the parent directory of the path (-r option)
	if [ $relative -eq $TRUE ]
	then
		cd "`getDir "$path"`" &&
		path="`getBase "$path"`"
	fi &&

	# - Add the type of FILEs to be searched (-d or -f option)
	c='find '"'$path'"' '"$type" &&

	# - Add the PATTERNs to be searched (-w option)
	c="$c"' \( -name '"'`getElementAt "$patterns" 0`'" &&
	size=`getArraySize "$patterns"` &&
	for i in `iterate 1 $size`
	do
		c="$c"' -o -name '"'`getElementAt "$patterns" $i`'"
	done &&
	c="$c"' \)' &&

	# - Add the FILEs to be searched or to be avoided (-n option)
	c="$c"' '"$not"' \( -name '"'`getElementAt "$ARGS" 0`'" &&
	for i in `iterate 1 $ARGS_NUMBER`
	do
		c="$c"' -o -name '"'`getElementAt "$ARGS" $i`'"
	done &&
	c="$c"' \) -exec printf "%s'"$delimiter"'" '\''{}'\' &&

	# - Use the optimization (if available)
	if find "$NULL_PATH" -exec true '{}' \+ > "$NULL_PATH" 2>&1
	then
		c="$c"' \+'
	else
		c="$c"' \;'
	fi &&

# o Evaluate the command

	verb "$c" &&
	eval "$c"
